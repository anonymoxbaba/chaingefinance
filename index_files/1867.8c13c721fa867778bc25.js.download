"use strict";(self.webpackChunktradingview=self.webpackChunktradingview||[]).push([[1867],{220732:(e,t,s)=>{s.d(t,{ChannelMultiplexer:()=>n});class n{constructor(){this._handlers={},this._specialHandlers={}}on(e,t){const s=this._isSpecialChannel(e)?this._specialHandlers:this._handlers;s[e]||(s[e]=[]),s[e].push(t)}off(e,t){const s=this._isSpecialChannel(e)?this._specialHandlers:this._handlers;if(!(e in s))return;if(void 0===t)return void delete s[e];const n=s[e].indexOf(t);n>=0&&s[e].splice(n,1)}emit(e,t,s,n){this._handlers[s]&&this._handlers[s].forEach((i=>{i(e,t,s,n)}));for(const i of Object.keys(this._specialHandlers)){const a="^"+i.replace(/\*/g,".*?")+"$";new RegExp(a).test(s)&&this._specialHandlers[i].forEach((i=>{i(e,t,s,n)}))}}_isSpecialChannel(e){return/\*/.test(e)}}},700469:(e,t,s)=>{s.d(t,{MultiplexerState:()=>h});var n=s(942634),i=s(79342),a=s(955273),o=s(226722),r=s(995773);class h{constructor(){this._id=(0,i.guid)(),this._state={[this._id]:{}},this._xEventPrefix="multiplexer-state-",this._xEventCreateTab=this._xEventPrefix+"create-new-tab",this._xEventShareState=this._xEventPrefix+"share-state",this._lockName="tab_destruction",this._stateChangeDelegate=new n.Delegate,this._createdLocks={},this._lockEnabled=(0,r.webLockEnabled)(),this._lockPromise=(0,a.createDeferredPromise)(),this._onTabCreateCb=null,this._onTabCreate=e=>{this._onTabCreateCb&&this._onTabCreateCb();const t=JSON.parse(e);this._state[t]={},this._shareState(),this._requestTabRemoveLock(t)},this._shareState=()=>{const e=JSON.stringify([this._id,this._state[this._id]]);o.TVXWindowEvents.emit(this._xEventShareState,e)},this._requestTabRemoveLock=e=>{!this._createdLocks[e]&&this._lockEnabled&&(this._createdLocks[e]=1,navigator.locks.request(`${this._lockName}_${e}`,(async()=>{const t=this._state[e]||{};this._compareTabState(e,{},t,"add"),this._compareTabState(e,t,{},"remove"),delete this._state[e],delete this._createdLocks[e]})))},this._onShareStateFromOther=e=>{const[t,s]=JSON.parse(e),n=this._state[t]||{};this._compareTabState(t,s,n,"add"),this._compareTabState(t,n,s,"remove"),this._state[t]=s,this._requestTabRemoveLock(t)},this._removeChannel=(e,t)=>{delete this._state[this._id][e][t],this._isListenByAnotherTab(e,t)||this._stateChangeDelegate.fire("remove",e,t);0===Object.keys(this._state[this._id][e]).length&&delete this._state[this._id][e]},o.TVXWindowEvents.on(this._xEventCreateTab,this._onTabCreate),o.TVXWindowEvents.on(this._xEventShareState,this._onShareStateFromOther),this._lockEnabled&&navigator.locks.request(`${this._lockName}_${this._id}`,(async()=>(o.TVXWindowEvents.emit(this._xEventCreateTab,JSON.stringify(this._id)),window.addEventListener("beforeunload",(()=>this._lockPromise.resolve())),this._lockPromise.promise)))}addChannel(e,t){this._isNotEmpty(e,t)?this._state[this._id][e][t]++:(this._state[this._id][e]||(this._state[this._id][e]={}),this._state[this._id][e][t]=1),this._isListenByAnotherTab(e,t)||this._stateChangeDelegate.fire("add",e,t),this._shareState()}removeChannel(e,t){
this._isExist(e,t)&&(this._state[this._id][e][t]--,this._isNotEmpty(e,t)||this._removeChannel(e,t),this._shareState())}collectPushStreamChannels(e){const t=new Set;return Object.keys(this._state).forEach((s=>{const n=this._state[s][e];this._state[s][e]&&Object.keys(n).forEach((e=>t.add(e)))})),Array.from(t)}onStateChange(e){this._stateChangeDelegate.subscribe(null,e)}offStateChange(e){this._stateChangeDelegate.unsubscribe(null,e)}onTabCreate(e){this._onTabCreateCb=e}_isExist(e,t,s=this._id){return void 0!==this._state[s]&&void 0!==this._state[s][e]&&void 0!==this._state[s][e][t]}_isNotEmpty(e,t,s=this._id){return this._isExist(e,t,s)&&this._state[s][e][t]>0}_compareTabState(e,t,s,n){Object.keys(t).forEach((i=>{Object.keys(t[i]).forEach((t=>{this._isListenByAnotherTab(i,t,e)||s[i]&&s[i][t]||this._stateChangeDelegate.fire(n,i,t)}))}))}_isListenByAnotherTab(e,t,s=this._id){return Object.keys(this._state).some((n=>n!==s&&this._isNotEmpty(e,t,n)))}}},501867:(e,t,s)=>{s.r(t),s.d(t,{pushStreamMultiplexer:()=>P});var n=s(226722),i=s(345848),a=s(49437),o=s(454576),r=s(175203),h=s(338619),c=s(358956),l=(s(659863),s(220732)),_=s(125226),u=s(79342),d=s(314802),m=s(700469),g=s(955273),v=s(995773);const S=(0,h.getLogger)(c.loggerSubsystemId),p={url:window.PUSHSTREAM_URL,urlPath:"message-pipe-ws",transportType:c.TransportType.WebSocket},C={url:window.PUSHSTREAM_URL.replace("wss://","https://"),urlPath:"message-pipe-es",transportType:c.TransportType.EventSource};class b{constructor(){var e;this.guid=(0,u.guid)(),this._pushStreamPublic=null,this._pushStreamPrivate=null,this._statusHandlers=[],this._reconnectHandlers=[],this._userPrivateChannel=null,this._channelMultiplexer=new l.ChannelMultiplexer,this._xEventPrefix="multiplexer-bc-",this._storagePrefix="pushStreamMultiplexerState.",this._userChannelPrefix="private_",this._statusPublic=o.ConnectionStatus.Closed,this._statusPrivate=o.ConnectionStatus.Closed,this._xEventSend=this._xEventPrefix+"send",this._xEventConnectionStatus=this._xEventPrefix+"connectionStatus",this._xEventReconnectCommand=this._xEventPrefix+"reconnectCommand",this._xEventReconnectSuccess=this._xEventPrefix+"reconnectSuccess",this._xEventRequestLogs=this._xEventPrefix+"requestLogs",this._xEventShareLogs=this._xEventPrefix+"shareLogs",this._state=new m.MultiplexerState,this._shareLogsKey=this._storagePrefix+"shareLogs",this._lockName="pushstream",this._lockPromise=(0,g.createDeferredPromise)(),this._dispatchReconnectSuccessCommandFromOther=e=>{if(this.ownPushStream())return;const[t]=this._decodeParams(e);this._callReconnectHandlers(t)},this._dispatchMessage=(e,t,s)=>{this._dispatchMessageToOthers(e,t,s),this._dispatchMessageToSelf(e,t,s,!1)},this._dispatchMessageFromOther=e=>{if(this.ownPushStream())return;const[t,s,n]=this._decodeParams(e);this._dispatchMessageToSelf(t,s,n,!0)},this._dispatchStatusChangeFromOther=e=>{const t=this._decodeConnectionStatus(e),s=t[0],n=t[1];this.ownPushStream()||this._dispatchStatusChangeToSelf(s,n)},this._dispatchReconnectCommandFromOther=()=>{
this.ownPushStream()&&this.forceConnect()},this._onRequestLogs=()=>{if(this.ownPushStream()){const e=this._getOwnLogs();let t="";try{t=JSON.stringify(e)}catch(e){S.logError("Failed to stringify own pushstream logs")}a.TVLocalStorage.setItem(this._shareLogsKey,t),n.TVXWindowEvents.emit(this._xEventShareLogs,t)}},this._onStateChange=(e,t,s)=>{const n="private"===t?this._pushStreamPrivate:this._pushStreamPublic;"add"===e?null==n||n.addChannel(s):null==n||n.removeChannel(s)},this._onNewTabCreate=()=>{this._dispatchStatusChangeToOthers(this._statusPublic,this._statusPrivate)},(0,v.webLockEnabled)()?navigator.locks.request(this._lockName,(async()=>(this._state.onStateChange(this._onStateChange),this._state.onTabCreate(this._onNewTabCreate),this._instantiatePushStream(),window.addEventListener("beforeunload",(()=>this._lockPromise.resolve())),this._lockPromise.promise))):(this._state.onStateChange(this._onStateChange),this._instantiatePushStream()),n.TVXWindowEvents.on(this._xEventSend,this._dispatchMessageFromOther),n.TVXWindowEvents.on(this._xEventConnectionStatus,this._dispatchStatusChangeFromOther),n.TVXWindowEvents.on(this._xEventReconnectCommand,this._dispatchReconnectCommandFromOther),n.TVXWindowEvents.on(this._xEventReconnectSuccess,this._dispatchReconnectSuccessCommandFromOther),n.TVXWindowEvents.on(this._xEventRequestLogs,this._onRequestLogs),e=()=>{window.loginStateChange&&window.loginStateChange.subscribe(this,this._changeLoginState)},"loading"!==document.readyState?e():document.addEventListener("DOMContentLoaded",e)}on(e,t){this._channelMultiplexer.on(e,t)}off(e,t){this._channelMultiplexer.off(e,t)}onStatus(e){this._statusHandlers.push({handler:e,isPrivate:!1}),setTimeout((()=>e(this._statusPublic)),0)}onPrivateStatus(e){this._statusHandlers.push({handler:e,isPrivate:!0}),setTimeout((()=>e(this._statusPrivate)),0)}onReconnect(e,t=!1){this._reconnectHandlers.push({handler:e,isPrivate:t})}offReconnect(e){this._reconnectHandlers=this._reconnectHandlers.filter((t=>t.handler!==e))}offStatus(e){this._statusHandlers=this._statusHandlers.filter((t=>t.handler!==e))}forceConnect(){var e,t;S.logNormal(`Creating pushstream connection after force connect. Main tab: ${this.ownPushStream()}`),this.ownPushStream()?(null===(e=this._pushStreamPublic)||void 0===e||e.disconnect(),null===(t=this._pushStreamPrivate)||void 0===t||t.disconnect(),this._instantiatePushStream()):n.TVXWindowEvents.emit(this._xEventReconnectCommand)}disconnect(){this.ownPushStream()&&this._destructPushStream()}getLogs(e){return new Promise((t=>{const s=setTimeout((()=>{const e=a.TVLocalStorage.getItem(this._shareLogsKey);t(null!==e?JSON.parse(e):[])}),1e3),i=e=>{let a;n.TVXWindowEvents.off(this._xEventShareLogs,i),n.TVXWindowEvents.emit(this._xEventShareLogs,""),clearTimeout(s);try{a=JSON.parse(e)}catch(e){a=[],S.logError("Failed to parse logs received from master tab")}t(a)};this.ownPushStream()?t(this._getOwnLogs(e)):(n.TVXWindowEvents.on(this._xEventShareLogs,i),n.TVXWindowEvents.emit(this._xEventRequestLogs))}))}ownPushStream(){
return!!this._pushStreamPublic||!!this._pushStreamPrivate}pushStream(){if(!this.ownPushStream())throw new Error("Not own PushStream");return this._pushStreamPublic}isConnected(){return this._statusPublic>0}status(){var e;return null!==(e=this._statusPublic)&&void 0!==e?e:o.ConnectionStatus.Closed}statusPrivate(){var e;return null!==(e=this._statusPrivate)&&void 0!==e?e:o.ConnectionStatus.Closed}userChannel(){if(!this._userPrivateChannel)throw new Error("No user channel");return this._userChannel(this._userPrivateChannel)}addChannel(e){this._state.addChannel(e.startsWith(this._userChannelPrefix)?"private":"public",e)}removeChannel(e){this._state.removeChannel(e.startsWith(this._userChannelPrefix)?"private":"public",e)}static getInstance(){return null===this._instance&&(this._instance=new b),this._instance}_userChannel(e){return this._userChannelPrefix+e}_codeParams(e){const t=[...e];return t.push((new Date).getTime()),JSON.stringify(t)}_decodeParams(e){const t=JSON.parse(e);return t.pop(),t}_instantiatePushStream(){this._pushStreamPublic&&((0,i.trackEvent)("PushstreamDoublePublic",window.user&&window.user.username||"Guest",navigator.userAgent),this._pushStreamPublic.disconnect());const e=this._getPushStreamSettings();this._pushStreamPublic=new c.PushStream(this._dispatchMessage,e),this._pushStreamPublic.connectionStatus().subscribe((e=>{this._dispatchStatusChange(e,this._statusPrivate)})),this._pushStreamPublic.reconnectEvent().subscribe(null,(()=>{this._dispatchReconnectSuccessCommand()})),this._pushStreamPrivate&&((0,i.trackEvent)("PushstreamDoublePrivate",window.user&&window.user.username||"Guest",navigator.userAgent),this._pushStreamPrivate.disconnect()),this._pushStreamPrivate=new c.PushStream(this._dispatchMessage,{...e,maxSize:1}),this._pushStreamPrivate.connectionStatus().subscribe((e=>{this._dispatchStatusChange(this._statusPublic,e)})),this._pushStreamPrivate.reconnectEvent().subscribe(null,(()=>{this._dispatchReconnectSuccessCommand(!0)})),this.on("pushstream_set_user_channel",(e=>{this._setUserChannel(e)})),this._connectChannels()}_destructPushStream(){const e=this._pushStreamPublic;this._pushStreamPublic=null,null==e||e.disconnect();const t=this._pushStreamPrivate;this._pushStreamPrivate=null,null==t||t.disconnect(),this._dispatchStatusChangeFromOther(this._codeParams([o.ConnectionStatus.Closed,o.ConnectionStatus.Closed]))}_connectChannels(){var e,t;null===(e=this._pushStreamPublic)||void 0===e||e.addChannel("public");const s=this._state.collectPushStreamChannels("public");void 0!==s&&s.length>0&&s.map((e=>{var t;return null===(t=this._pushStreamPublic)||void 0===t?void 0:t.addChannel(e)})),"is_authenticated"in window?this._connectUserChannelInitial(!0):window.loginStateChange&&window.loginStateChange.subscribe(this,this._connectUserChannelInitial),this._isPublicPushstreamEnabled()&&(null===(t=this._pushStreamPublic)||void 0===t||t.connect())}_getPushStreamSettings(){return(0,d.isOnMobileAppPage)("any")?(0,_.isFeatureEnabled)("enable_eventsource_pushstream_mobile")?C:p:(0,
_.isFeatureEnabled)("enable_eventsource_pushstream_transport")?C:p}_isPublicPushstreamEnabled(){return(0,d.isOnMobileAppPage)("any")||!(0,_.isFeatureEnabled)("disable_pushstream_connections_for_anonymous_users")||window.is_authenticated||window.TradingView.onChartPage}_connectUserChannelInitial(e){var t,s,n;e&&(window.is_authenticated?(this._userPrivateChannel=null!==(t=window.user.private_channel)&&void 0!==t?t:null,null===(s=this._pushStreamPrivate)||void 0===s||s.addChannel(this.userChannel()),null===(n=this._pushStreamPrivate)||void 0===n||n.connect()):this._userPrivateChannel=null)}_changeLoginState(e){var t,s,n,i,a,o;e||(this._isPublicPushstreamEnabled()&&(null===(t=this._pushStreamPublic)||void 0===t||t.connect()),window.is_authenticated?(this._userPrivateChannel=null!==(s=window.user.private_channel)&&void 0!==s?s:null,this.ownPushStream()&&(null===(n=this._pushStreamPrivate)||void 0===n||n.addChannel(this.userChannel()),null===(i=this._pushStreamPrivate)||void 0===i||i.connect())):(this.ownPushStream()&&(null===(a=this._pushStreamPrivate)||void 0===a||a.removeChannel(this.userChannel()),null===(o=this._pushStreamPrivate)||void 0===o||o.disconnect()),this._userPrivateChannel=null))}_setUserChannel(e){var t,s;S.logNormal("Set user channel "+e),e!==this._userPrivateChannel&&(this.ownPushStream()&&this._userPrivateChannel&&(null===(t=this._pushStreamPrivate)||void 0===t||t.removeChannel(this.userChannel())),this._userPrivateChannel=e,this.ownPushStream()&&this._userPrivateChannel&&(null===(s=this._pushStreamPrivate)||void 0===s||s.addChannel(this.userChannel())))}_dispatchStatusChange(e,t){this._dispatchStatusChangeToOthers(e,t),this._dispatchStatusChangeToSelf(e,t)}_dispatchStatusChangeToSelf(e,t){e!==this._statusPublic&&(this._statusPublic=e,this._callStatusHandlers(e,!1)),t!==this._statusPrivate&&(this._statusPrivate=t,this._callStatusHandlers(t,!0))}_callStatusHandlers(e,t){S.logNormal("Connection status change: "+e+", private "+t+", is main tab "+this.ownPushStream()),r.telemetry.sendReport("site","pushstream_status_change"),this._statusHandlers.forEach((s=>{s.isPrivate===t&&s.handler(e)}))}_callReconnectHandlers(e){S.logNormal("Reconnection has been made"),this._reconnectHandlers.forEach((t=>{t.isPrivate===e&&t.handler()}))}_dispatchReconnectSuccessCommand(e=!1){if(this.ownPushStream()){this._callReconnectHandlers(e);const t=this._codeParams([e]);n.TVXWindowEvents.emit(this._xEventReconnectSuccess,t)}}_decodeConnectionStatus(e){const t=parseInt(e,10);return isNaN(t)?this._decodeParams(e):[t,t]}_dispatchStatusChangeToOthers(e,t){if(this.ownPushStream()){const s=this._codeParams([e,t]);n.TVXWindowEvents.emit(this._xEventConnectionStatus,s)}}_dispatchMessageToSelf(e,t,s,n){const i=e.channel,a=e.content;this._emit(a,t,i,n)}_dispatchMessageToOthers(e,t,s){const i=[e,t,s];n.TVXWindowEvents.emit(this._xEventSend,this._codeParams(i))}_emit(e,t,s,n){this._channelMultiplexer.emit(e,t,s,n)}_getOwnLogs(e){var t;if(this.ownPushStream()){const s=(0,
h.getRawLogHistory)(e,c.loggerSubsystemId),n=null===(t=this.pushStream())||void 0===t?void 0:t.getLogs();return[].concat(s,null!=n?n:[])}return[]}}b._instance=null;const P=b.getInstance()},358956:(e,t,s)=>{s.d(t,{PushStream:()=>g,TransportType:()=>m,loggerSubsystemId:()=>u});var n=s(650151),i=s(5553),a=s(338619),o=s(454576),r=s(78770);const h=(0,a.getLogger)("PersistentWebsocketTransport");class c extends r.PersistentTransport{constructor(e,t){super(e,h,t)}sendMessage(e){this._connectionStatus.value()===o.ConnectionStatus.Open?this._socket?this._socket.send(e):h.logError("Something went wrong - code 0x3"):h.logWarn("Attempt to send message but connection is not opened")}_createNativeTransport(e){const t=new WebSocket(e);return t.binaryType="arraybuffer",t.addEventListener("error",this._socketErrorHandler),t.addEventListener("close",this._socketCloseHandler),t.addEventListener("open",this._socketOpenHandler),t.addEventListener("message",this._socketMessageHandler),t}_disconnectTransport(){if(null===this._socket)return;this._socket.removeEventListener("error",this._socketErrorHandler),this._socket.removeEventListener("close",this._socketCloseHandler),this._socket.removeEventListener("open",this._socketOpenHandler),this._socket.removeEventListener("message",this._socketMessageHandler),this._removeOnOfflineListener();const e=this._socket;this._socket=null,this._connectionStatus.setValue(o.ConnectionStatus.Closed),e.readyState!==WebSocket.CLOSED&&e.close()}}var l=s(175203);class _{constructor(e){this._queue=[],this._isWorking=!1,this._onResolve=()=>{this._queue.length>0&&this._createPromise(this._queue[0])},this._logger=e}enqueue(e){this._logger.logNormal(`Adding channel in stack. Queue size: ${this._queue.length}`),this._isWorking||this._createPromise(e),this._queue.push(e)}_createPromise(e){this._isWorking=!0,this._wrap(e).then(this._onResolve)}_wrap(e){return new Promise((t=>{e().catch((e=>this._logger.logNormal(`Error when trying handling channel: ${e.message}`))).finally((()=>{this._isWorking=!1,this._queue.shift(),t()}))}))}}const u="PushStream",d=(0,a.getLogger)(u);var m;!function(e){e[e.EventSource=0]="EventSource",e[e.WebSocket=1]="WebSocket"}(m||(m={}));class g{constructor(e,t){this._channels=[],this._queue=new _(d),this._transport=t.transportType===m.EventSource?new i.PersistentEventSourceTransport(this._onPushStreamMessage.bind(this)):new c(this._onPushStreamMessage.bind(this),this._onPushStreamClose.bind(this)),this._settings=t,this._messageHandler=e}addChannel(e){this._queue.enqueue((()=>this._addChannel(e)))}removeChannel(e){this._queue.enqueue((()=>this._removeChannel(e)))}getChannels(){return this._channels}hasChannel(e){return-1!==this._channels.indexOf(e)}connectionStatus(){return this._transport.connectionStatus()}reconnectEvent(){return this._transport.successReconnectReachedEvent()}connect(){(0,n.assert)(0!==this._channels.length,"There is no channels"),this._transport.connect()}disconnect(){this._transport.disconnect()}getLogs(e){return(0,a.getRawLogHistory)(e,u)}async _addChannel(e){(0,
n.assert)(!this.hasChannel(e),`Channel with name ${e} has already been subscribed`),d.logNormal(`Adding channel ${e}`),this._channels.push(e);const{maxSize:t}=this._settings;return void 0!==t&&this._channels.length>t&&(this._channels=this._channels.slice(this._channels.length-t)),this._transport.setUrl(this._generateUrl())}async _removeChannel(e){const t=this._channels.indexOf(e);return(0,n.assert)(-1!==t,`There is no channel with name ${e}`),d.logNormal(`Removing channel ${e}`),this._channels.splice(t,1),this._transport.setUrl(this._generateUrl())}_onPushStreamMessage(e){if("string"!=typeof e)throw new Error("Wrong message type, expected string");const t=JSON.parse(e),s=t.id,n=t.channel;-2===s?d.logWarn("Received unexpected message: about removed the channel"):s>0&&(d.logDebug(`Received message: id="${s}" channel="${n}"`),this._messageHandler(t.text,s,n))}_onPushStreamClose(e){1005===e.code&&l.telemetry.sendChartReport("websocket_code_1005")}_generateUrl(){const e=this._channels.join("/");return d.logNormal(`Generate pushstream url - ${e}`),`${this._settings.url}/${this._settings.urlPath}/${e}`}}},995773:(e,t,s)=>{s.d(t,{webLockEnabled:()=>i});var n=s(167175);function i(){return!n.isIOS&&!n.isIPad&&void 0!==navigator.locks}},5553:(e,t,s)=>{s.d(t,{PersistentEventSourceTransport:()=>o});var n=s(454576),i=s(78770);const a=(0,s(338619).getLogger)("PersistentWebsocketTransport");class o extends i.PersistentTransport{constructor(e){super(e,a),this._specializedErrorHandlerBound=this._specializedErrorHandler.bind(this)}_createNativeTransport(e){const t=new EventSource(e,{withCredentials:!0});return t.addEventListener("error",this._specializedErrorHandlerBound),t.addEventListener("open",this._socketOpenHandler),t.addEventListener("message",this._socketMessageHandler),t}_disconnectTransport(){if(null===this._socket)return;this._socket.removeEventListener("error",this._specializedErrorHandlerBound),this._socket.removeEventListener("open",this._socketOpenHandler),this._socket.removeEventListener("message",this._socketMessageHandler),this._removeOnOfflineListener();const e=this._socket;this._socket=null,this._connectionStatus.setValue(n.ConnectionStatus.Closed),e.readyState!==WebSocket.CLOSED&&e.close()}_specializedErrorHandler(e){e.eventPhase===EventSource.CLOSED?this._socketCloseHandler(e):this._socketErrorHandler()}}},78770:(e,t,s)=>{s.d(t,{PersistentTransport:()=>h});var n=s(454576),i=s(878),a=s(375397),o=s(942634),r=s(622864);class h{constructor(e,t,s){this._url="",this._socket=null,this._reconnectCount=0,this._onlineCancellationToken=null,this._connectionStatus=new a.WatchedValue(n.ConnectionStatus.Closed),this._socketCloseHandler=this._onCloseCallback.bind(this),this._socketErrorHandler=this._onErrorCallback.bind(this),this._socketOpenHandler=this._onOpenCallback.bind(this),this._socketMessageHandler=this._onMessageCallback.bind(this),this._maxReconnectReachedEventDelegate=new o.Delegate,this._successReconnectReachedEventDelegate=new o.Delegate,this._shouldReconnect=!0,this._maxReconnectCount=null,
this._reconnectTimeoutId=0,this._connectAbortController=null,this._tryReconnect=()=>{if(this._disconnect(),this._shouldReconnect){const e=this._getReconnectTimeout();this._logger.logNormal(`Sleeping some time before reconnect ${e}ms`),this._reconnectTimeoutId=setTimeout(this._tryReconnectImpl.bind(this),e)}else this._logger.logNormal("Skip reconnecting because of shouldReconnect state")},this._onOfflineHandler=()=>{this._removeOnOfflineListener(),this._logger.logInfo("Network status changed to offline - trying to reconnect"),this._tryReconnect()},this._logger=t,this._messageHandler=e,this._closeHandler=s,window.addEventListener("unload",(()=>{t.logNormal("Unload event comes - disconnecting without reconnect after that..."),this._shouldReconnect=!1,this._disconnect()}),!1)}setUrl(e){if(this._url===e)return Promise.resolve();const t=this._connectionStatus.value()!==n.ConnectionStatus.Closed;return t&&this._disconnect(),this._url=e,t?this.connect():Promise.resolve()}url(){return this._url}connect(){return this._connectImpl()}setMaxReconnectCount(e){this._maxReconnectCount=e}connectionStatus(){return this._connectionStatus.readonly()}disconnect(){this._shouldReconnect=!1,this._disconnect()}maxReconnectReachedEvent(){return this._maxReconnectReachedEventDelegate}successReconnectReachedEvent(){return this._successReconnectReachedEventDelegate}async _prepareParamsForConnection(e){}_disconnect(){var e;null===(e=this._connectAbortController)||void 0===e||e.abort(),this._connectAbortController=null,clearTimeout(this._reconnectTimeoutId),this._reconnectTimeoutId=0,this._connectionStatus.value()!==n.ConnectionStatus.Closed?this._socket?(this._logger.logNormal(`Closing connection to: ${this._socket.url}, currentStatus: ${n.ConnectionStatus[this._connectionStatus.value()]}`),this._disconnectTransport()):this._logger.logNormal("Disconnecting without socket - probably within preparing, it should be already scheduled for aborting"):this._logger.logNormal("Attempt to close connection but it is closed already")}_onErrorCallback(){this._logger.logInfo("Connection is closed by error"),this._tryReconnect()}_onCloseCallback(e){var t;this._logger.logInfo(`Connection is closed - code=${e.code} msg=${e.reason}`),null===(t=this._closeHandler)||void 0===t||t.call(this,e),this._tryReconnect()}_tryReconnectImpl(){return null!==this._maxReconnectCount&&this._reconnectCount===this._maxReconnectCount?(this._logger.logWarn("Maximum attempts to reconnect to websocket reached"),void this._maxReconnectReachedEventDelegate.fire()):(this._reconnectCount+=1,this._logger.logInfo(`Reconnecting count: ${this._reconnectCount}`),navigator.onLine?(this._logger.logInfo("Network status: online - trying to connect"),void this.connect()):(this._logger.logInfo("Network status: offline - wait until online"),void(this._onlineCancellationToken=(0,i.callWhenOnline)((()=>{this._logger.logInfo("Network status changed to online - trying to connect"),this.connect()})))))}_onOpenCallback(){this._logger.logNormal("Connection opened"),
this._reconnectCount>0&&this._successReconnectReachedEventDelegate.fire(),this._reconnectCount=0,this._connectionStatus.setValue(n.ConnectionStatus.Open)}_onMessageCallback(e){this._messageHandler(e.data)}_getReconnectTimeout(){return this._reconnectCount<5?300:5e3}_setOnOfflineListener(){window.addEventListener("offline",this._onOfflineHandler)}_removeOnOfflineListener(){window.removeEventListener("offline",this._onOfflineHandler)}async _connectImpl(){if(this._connectionStatus.value()!==n.ConnectionStatus.Closed)return void this._logger.logNormal("Attempt to open connection but it is not closed");this._socket&&(this._logger.logError("Something went wrong - code 0x2"),this.disconnect()),this._onlineCancellationToken&&(this._onlineCancellationToken(),this._onlineCancellationToken=null),this._logger.logNormal(`Connecting to ${this._url}`),this._shouldReconnect=!0,this._connectAbortController=new AbortController;const e=this._connectAbortController.signal;try{if(this._connectionStatus.setValue(n.ConnectionStatus.Connecting),await this._prepareParamsForConnection(e),e.aborted)throw(0,r.createAbortError)();this._socket=this._createNativeTransport(this._url),this._setOnOfflineListener()}catch(e){this._connectionStatus.setValue(n.ConnectionStatus.Closed),(0,r.skipAbortError)(e)}finally{this._connectAbortController=null}}}},878:(e,t,s)=>{function n(e){let t=e;const s=()=>{window.removeEventListener("online",s),t&&t()};return window.addEventListener("online",s),()=>{t=null}}s.d(t,{callWhenOnline:()=>n})}}]);